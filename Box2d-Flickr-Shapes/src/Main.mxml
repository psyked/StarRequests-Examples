<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="500" height="560"
			   creationComplete="onCreationComplete(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import Box2D.Common.Math.b2Vec2;
			import Box2D.Dynamics.b2Body;

			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.PagedPhotoList;
			import com.adobe.webapis.flickr.Photo;
			import com.adobe.webapis.flickr.PhotoPool;
			import com.adobe.webapis.flickr.PhotoSize;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.adobe.webapis.flickr.methodgroups.Photos;
			import com.adobe.webapis.flickr.methodgroups.helpers.PhotoSearchParams;

			import couk.markstar.starrequests.requests.IRequest;
			import couk.markstar.starrequests.utils.RequestQueueAsyncUtil;
			import couk.psyked.box2d.Box2DWorld;
			import couk.psyked.box2d.utils.Box2DShapeOptions;
			import couk.psyked.box2d.utils.Box2DUtils;
			import couk.psyked.box2d.utils.Box2DWorldOptions;
			import couk.psyked.starrequests.requests.flickr.FlickrPhotoRequest;

			import flashx.textLayout.tlf_internal;

			import mx.events.FlexEvent;

			import spark.filters.ShaderFilter;

			private static const KEY:String = "c75395becb55dcc56a3c343963ff953c";

			private static const SECRET:String = "b7cf52fc45484c27";

			private var _service:FlickrService;

			private var _photos:Photos;

			private function onCreationComplete( e:FlexEvent ):void
			{
				var options:Box2DWorldOptions = new Box2DWorldOptions( display.width, display.height, 30, 9.8 );
				options.setWorldEdges( true, false, false, false );
				world = Box2DUtils.createBoxedWorld( options );
				world.debugDraw = true;
				world.mouseInteractExclusions = new Array();
				world.mouseInteraction = true;
				world.framerateIndependantAnimation = true;

				display.addChild( world );

				fiaTimer = new Timer( framerate );
				fiaTimer.addEventListener( TimerEvent.TIMER, onTimer );
				fiaTimer.start();

				_service = new FlickrService( KEY );
				_service.secret = SECRET;
				_service.addEventListener( FlickrResultEvent.PHOTOS_SEARCH, handleSearchResult );

				_photos = new Photos( _service );
				onSearchClick();

			}

			private var framerate:Number = ( 1000 / 60 );

			private function onTimer( e:TimerEvent ):void
			{
				world.forEachBody( updateImagePosition );
			}

			private var fiaTimer:Timer;

			protected var queue:RequestQueueAsyncUtil = new RequestQueueAsyncUtil( 1, 500 );

			protected function updateImagePosition( body:b2Body ):void
			{
				var bodyPosition:b2Vec2 = body.GetPosition();
				var bodyRotation:Number = body.GetAngle();
				var object:Sprite = body.GetUserData() as Sprite;

				//trace( body.GetUserData());

				if ( object )
				{
					if ( !object.visible )
					{
						object.visible = true;
					}
					object.rotation = 0; // If not, matrix starts wrong.
					var m:Matrix = object.transform.matrix;

					m.tx = -object.width / 2;
					m.ty = -object.height / 2;

					m.rotate( bodyRotation ); // Already in radians

					// Now set the position to the world position
					m.tx += bodyPosition.x * world.options.scale;
					m.ty += bodyPosition.y * world.options.scale;

					// ...and set the whole thing at once via the matrix.
					// ie. Update the sprite.
					object.transform.matrix = m;

					if (( bodyPosition.y * world.options.scale ) > stage.stageHeight )
					{
						world.world.DestroyBody( body );
						display.removeChild( object );
					}
				}
			}

			protected var world:Box2DWorld;

			private function handleSearchResult( event:FlickrResultEvent ):void
			{
				var list:Array = PagedPhotoList( event.data.photos ).photos;

				for each ( var photo:Photo in list )
				{
					var request:IRequest = new FlickrPhotoRequest( photo, FlickrPhotoRequest.SIZE_SMALL );
					request.completedSignal.add( createObjectWithBitmap );
					queue.addRequest( request );
				}
			}

			private function createObjectWithBitmap( bitmap:Bitmap ):void
			{
				var object:Sprite = new Sprite();
				var _bitmap:Bitmap = new Bitmap( bitmap.bitmapData );
				object.addChild( _bitmap );
				//var body:b2Body = world.createRectangle( display.width * Math.random(), 0, _bitmap.width / 2, _bitmap.height / 2, 0 );
				var options:Box2DShapeOptions = new Box2DShapeOptions();
				options.userData = object;
				world.createPolyFromLibraryShape( display.width * Math.random(), 0, "star", "libraryShapes.swf", null, null, options );
				object.visible = false;
				display.addChild( object );
				var maskObject:DisplayObject = new starShape() as DisplayObject;

				if ( _bitmap.width < _bitmap.height )
				{
					_bitmap.width = maskObject.width;
					_bitmap.scaleY = _bitmap.scaleX;
				}
				else
				{
					_bitmap.height = maskObject.height;
					_bitmap.scaleX = _bitmap.scaleY;
				}
				maskObject.x = _bitmap.width / 2;
				maskObject.y = _bitmap.height / 2;
				object.addChild( maskObject );

				_bitmap.mask = maskObject;

				//_bitmap.width = 300;
				//body.SetUserData( _bitmap );
			}

			[Embed( 'libraryShapes.swf', symbol='star' )]
			private static var starShape:Class;

			protected function onSearchClick( event:Event = null ):void
			{
				var params:PhotoSearchParams = new PhotoSearchParams();
				//params.group_id = "562133@N25";
				//params.per_page = 10; //60;
				params.tags = search_text.text;
				//params.text = search_text.text;
				params.per_page = search_number.value; //60;
				_photos.searchWithParamHelper( params );
				//_photos.search( "", "stormtrooper", "any", "", null, null, null, null, -1, "date-posted-desc", -1, "", 1, 1, 1, "", "", "", "", "", "", "", true, "", "", -1, -1, "", 16 );
			}
		]]>
	</fx:Script>
	<s:BitmapImage source="@Embed('assets/flickr-yahoo-logo.png.v2.png')" right="10" bottom="15" />
	<s:Label x="241" y="524" text="Powered by" height="16" color="0x999999" />
	<mx:UIComponent top="42" left="10" bottom="10" right="10" id="display" />
	<s:Rect bottom="0" left="0" right="0" height="11">
		<s:fill>
			<s:SolidColor color="0xCCCCCC" />
		</s:fill>
	</s:Rect>
	<s:Button x="405" y="11" label="Get images" height="23" click="onSearchClick(event)" />
	<s:TextInput x="84" y="12" width="192" text="sample" fontStyle="italic" color="#666666"
				 id="search_text" enter="onSearchClick(event)" />
	<s:NumericStepper x="343" y="11" fontStyle="italic" color="#666666" value="10" maximum="256"
					  id="search_number" width="54" />
	<s:Label x="9" y="18" text="Search term:" height="16" />
	<s:Label x="284" y="18" text="# images:" width="56" height="16" />
</s:Application>
